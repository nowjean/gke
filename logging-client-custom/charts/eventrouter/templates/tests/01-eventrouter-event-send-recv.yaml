---
apiVersion: v1
kind: Pod
metadata:
  name: {{ printf "%s-%s" .Release.Name "routertest" | trunc 63 }}
  annotations:
    "helm.sh/hook": test-success
spec:
  serviceAccountName: {{ .Values.name }}-{{ .Release.Namespace }}
  initContainers:
    - name: test-framework
      image: dduportal/bats:0.4.0
      command:
      - "bash"
      - "-c"
      - |
        set -ex
        # copy bats to tools dir
        cp -R /usr/local/libexec/ /tools/bats/
      volumeMounts:
      - mountPath: /tools
        name: tools
  containers:
    - name: {{ .Release.Name }}-test
      image: {{ .Values.test.image }}
      command: ["/tools/bats/bats", "-t", "/tests/run.sh"]
      env:
      - name: TIMENOW
        value: {{ trim (printf "%s" .Release.Time) | quote }}
      volumeMounts:
      - name: tests
        mountPath: /tests
      - name: tools
        mountPath: /tools
      - name: testfiles
        mountPath: /testfiles
  volumes:
  - name: tests
    configMap:
      name: {{ printf "%s-%s" .Release.Name "routertest" | trunc 63 }}
  - name: tools
    emptyDir: {}
  - name: testfiles
    emptyDir: {}
  restartPolicy: Never

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ printf "%s-%s" .Release.Name "routertest" | trunc 63 }}
data:
  event-test.tpl: |-
    {
      "apiVersion": "v1",
      "count": 1,
      "involvedObject": {
        "apiVersion": "v1",
        "kind": "HelmTest",
        "namespace": {{- .Release.Namespace | quote }}
      },
      "kind": "Event",
      "message": "*** This is an INFO type event triggered by TESTS @ $TIMESTAMP. ***",
      "metadata": {
        "name": "Validate EventRouter Works $TIMESTAMP"
      },
      "reason": "helmtesting",
      "reportingComponent": "",
      "reportingInstance": "",
      "type": "Normal"
    }

  run.sh: |
    RETRY_CNT=12
    RETRY_DLY=1
    RETRY_MAX_TIME=60
    CNCT_TIMEOUT=5
    KUBEAPI_URL="https://kubernetes.default.svc/api/v1/namespaces/{{ .Release.Namespace }}/events"
    CACERT_FILE="/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
    TOKEN="$(< /var/run/secrets/kubernetes.io/serviceaccount/token)"
    TEST_TMPL_DIR="/tests"
    TEST_TEMP_DIR="/testfiles"
    BATS_TMPDIR="/testfiles"
    TEST_TMPL="$TEST_TMPL_DIR/event-test.tpl"
    TEST_JSON="$TEST_TEMP_DIR/tests.json"
    TMP_RESP="$BATS_TMPDIR/resp.out"
    TIMESTAMP="$(date +%FT%H:%M:%SZ)"

    # TIMENOW is set in the pod definition
    cd $TEST_TMPL_DIR

    # test 1
    @test "Create VALID test JSON from template" {
      echo "" >&3
      echo "=====================================" >&3
      echo "\$TIMENOW is: $TIMENOW" >&3
      echo "\$TIMESTAMP is: $TIMESTAMP" >&3

      # /tests in $TEST_JSON is using the volumeMounts path
      # from the containers spec
      #sed -r 's/\$TIMENOW/'"$TIMENOW"'/' $TEST_TMPL > $TEST_JSON
      sed -r 's/\$TIMESTAMP/'"$TIMESTAMP"'/' $TEST_TMPL > $TEST_JSON
      echo "=====================================" >&3
      echo "$(cat $TEST_JSON)" >&3

      [[ -s $TEST_JSON ]]
    }

    # test 2
    @test "Test SEND event to EventRouter Service" {
      echo "" >&3
      echo "=====================================" >&3
      echo "KUBEAPI URL is: $KUBEAPI_URL" >&3
      echo "TEST_TMPL is: $TEST_TMPL" >&3
      echo "TEST_JSON is: $TEST_JSON" >&3
      echo "PWD is: $PWD" >&3

      echo "" >&3
      echo "=====================================" >&3
      echo "The INPUT TEMPLATE directory contains:" >&3
      echo "$(ls -ltr $TEST_TMPL_DIR)" >&3

      echo "The INPUT TEMPLATE contains:" >&3
      echo "$(cat $TEST_TMPL)" >&3

      echo "" >&3
      echo "=====================================" >&3
      echo "The OUTPUT JSON directory contains:" >&3
      echo "$(ls -ltr $TEST_TEMP_DIR)" >&3

      echo "" >&3
      echo "The INPUT JSON contains (cat -A):" >&3
      echo "$(cat -A $TEST_JSON)" >&3

      run curl --connect-timeout $CNCT_TIMEOUT       \
               --verbose                             \
               --silent                              \
               --retry $RETRY_CNT                    \
               --retry-delay $RETRY_DLY              \
               --retry-max-time  $RETRY_MAX_TIME     \
               --cacert $CACERT_FILE --header "Authorization: Bearer $TOKEN" \
               --header "Content-Type: application/json" \
               --write-out "\n\n{\"status\": \"%{http_code}\"}" \
               -X POST $KUBEAPI_URL -d @$TEST_JSON

      resp_status=$(echo "$output" | tail -n 1 | jq -r -M '.status' )

      echo "" >&3
      echo "STATUS from JSON response was: ${resp_status:=NOT reported; probably because no JSON was returned.}" >&3
      echo -e "OUTPUT from cURL response was:\n$output" >&3 

      [[ $resp_status == 2[02][0-6] ]]
    }

    # test 3
    @test "Test VERIFY event to EventRouter Service RECVd" {
      curl --connect-timeout $CNCT_TIMEOUT           \
           --verbose                                 \
           --silent                                  \
           --retry $RETRY_CNT                        \
           --retry-delay $RETRY_DLY                  \
           --retry-max-time  $RETRY_MAX_TIME         \
           --cacert $CACERT_FILE                     \
           --header "Authorization: Bearer $TOKEN"   \
           --header "Content-Type: application/json" \
           --write-out "\n\n{\"status\": \"%{http_code}\"}" \
           $KUBEAPI_URL >$TMP_RESP

      resp_status=$(echo "$output" | tail -n 1 | jq -r -M '.status' )
      echo "curl get status ${status}" >&3

      # echo "" >&3
      #echo "RESPONSE from GET EVENTS" >&3
      #echo "$(cat $TMP_RESP)" >&3

      #run jq --arg match_this "$TIMENOW" -c -M '.items[].message | ' $BATS_TMPDIR/resp.out
      ##run grep "$TIMENOW" $TMP_RESP
      run grep "$TIMESTAMP" $TMP_RESP

      [[ $output == *$TIMESTAMP* ]]
    }
